<h1>Array helpers</h1>

<p>The array helpers enable advanced array logic and manipulation.</p>

<h2>Install</h2>

<Example @name="demo-services-arrays-install.bash">
	ember install @ascua/arrays
</Example>

<h2>any-by</h2>

<p>Checks whether the given property is <code>true</code> on any item in a given array.</p>

<Example @name="demo-helpers-arrays-anyby.hbs">
	{{#if (any-by "isAdult" this.people)}}
		At least one has `isAdult === true`
	{{/if}}
</Example>

<p>Or if given property is equal to the given value on any item in a given array.</p>

<Example @name="demo-helpers-arrays-anyby-value.hbs">
	{{#if (any-by "isAdult" false this.people)}}
		At least one has `isAdult === false`
	{{/if}}
</Example>

<h2>append</h2>

<p>Appends each given array to the previous given arrays, resulting in a single flat array.</p>

<Example @name="demo-helpers-arrays-append.hbs">
	{{#each (append this.adults this.childs) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>compact</h2>

<p>Removes null or undefined values from the given array.</p>

<Example @name="demo-helpers-arrays-compact.hbs">
	{{#each (compact this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>empty</h2>

<p>Checks to see if an array is empty.</p>

<Example @name="demo-helpers-arrays-empty.hbs">
	{{#if (empty this.people)}}
		No people exist...
	{{else}}
		People exist
	{{/if}}
</Example>

<h2>every-by</h2>

<p>Checks whether the given property is <code>true</code> on every item in a given array.</p>

<Example @name="demo-helpers-arrays-everyby.hbs">
	{{#if (every-by "isAdult" this.adults)}}
		All have `isAdult === true`
	{{/if}}
</Example>

<p>Or if given property is equal to the given value on every item in a given array.</p>

<Example @name="demo-helpers-arrays-everyby-value.hbs">
	{{#if (every-by "isAdult" false this.childs)}}
		All have `isAdult === false`
	{{/if}}
</Example>

<h2>filter-by</h2>

<p>Returns the given array filtered by a property.</p>

<Example @name="demo-helpers-arrays-filterby.hbs">
	{{#each (filter-by "isAdult" this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>Returns the given array filtered by a property.</p>

<Example @name="demo-helpers-arrays-filterby-value.hbs">
	{{#each (filter-by "isAdult" false this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>You can also pass an action as second argument.</p>

<Example @name="demo-helpers-arrays-filterby-function.hbs">
	{{#each (filter-by this.func this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>find-by</h2>

<p>Returns the first entry matching the given value from the given array.</p>

<Example @name="demo-helpers-arrays-findby.hbs">
	{{#let (find-by "isAdult" this.people) as |person|}}
		{{person.name}}
	{{/let}}
</Example>

<p>Returns the first entry matching the given value from the given array.</p>

<Example @name="demo-helpers-arrays-findby-value.hbs">
	{{#let (find-by "isChild" false this.people) as |person|}}
		{{person.name}}
	{{/let}}
</Example>

<p>You can also pass an action as second argument.</p>

<Example @name="demo-helpers-arrays-findby-function.hbs">
	{{#let (find-by this.func this.people) as |person|}}
		{{person.name}}
	{{/let}}
</Example>

<h2>first</h2>

<p>Returns the first object of the given array.</p>

<Example @name="demo-helpers-arrays-first.hbs">
	{{#let (first this.people) as |person|}}
		{{person.name}}
	{{/let}}
</Example>

<h2>flatten</h2>

<p>Returns a flattened array from the given array.</p>

<Example @name="demo-helpers-arrays-flatten.js">
	let array = [ [1], [2], [3] ];
</Example>

<Example @name="demo-helpers-arrays-flatten.hbs">
	{{#each (flatten this.array this.array) as |step|}}
		{{step}}
	{{/each}}
</Example>

<h2>group-by</h2>

<p>Groups items in a given array by the given path.</p>

<Example @name="demo-helpers-arrays-groupby.hbs">
	{{#each-in (group-by "type" this.people) as |category people|}}
		{{category}}:
		{{#each people as |person|}}
			{{person.name}}
		{{/each}}
		<br>
	{{/each-in}}
</Example>

<h2>includes</h2>

<p>Checks to see if an array includes an object.</p>

<Example @name="demo-helpers-arrays-includes.hbs">
	{{#if (includes this.adult1 this.people)}}
		adult1 exists within people...
	{{/if}}
</Example>

<p>Or if an array includes an array of objects.</p>

<Example @name="demo-helpers-arrays-includes-multi.hbs">
	{{#if (includes this.adults this.people)}}
		adults exist within people...
	{{/if}}
</Example>

<h2>join</h2>

<p>Concatenates the given array with an optional separator.</p>

<Example @name="demo-helpers-arrays-join.hbs">
	{{join (array "tag1" "tag2" "tag3")}}
</Example>

<p>You can use an optional separator.</p>

<Example @name="demo-helpers-arrays-join-separator.hbs">
	{{join ", " (array "tag1" "tag2" "tag3")}}
</Example>

<h2>last</h2>

<p>Returns the last object of the given array.</p>

<Example @name="demo-helpers-arrays-last.hbs">
	{{#let (last this.people) as |person|}}
		{{person.name}}
	{{/let}}
</Example>

<h2>length</h2>

<p>Returns the length of the given array.</p>

<Example @name="demo-helpers-arrays-length.hbs">
	{{length this.people}}
</Example>

<h2>map-by</h2>

<p>Returns the given array mapped to the given property.</p>

<Example @name="demo-helpers-arrays-mapby.hbs">
	{{#each (map-by "name" this.people) as |name|}}
		{{name}}
	{{/each}}
</Example>

<h2>object-at</h2>

<p>Returns the object at the given <code>index</code> of an array.</p>

<Example @name="demo-helpers-arrays-objectat.hbs">
	{{#let (object-at 1 this.people) as |person|}}
		{{person.name}}
	{{/let}}
</Example>

<h2>objects-at</h2>

<p>Returns the object at the given <code>indexes</code> of an array.</p>

<Example @name="demo-helpers-arrays-objectsat.hbs">
	{{#each (objects-at 1 3 5 this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>omit</h2>

<p>Returns the given array with the first <code>count</code> items omitted.</p>

<Example @name="demo-helpers-arrays-omit.hbs">
	{{#each (omit 3 this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>prepend</h2>

<p>Prepends each given array to the previous given arrays, resulting in a single flat array.</p>

<Example @name="demo-helpers-arrays-prepend.hbs">
	{{#each (prepend this.adults this.childs) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>range</h2>

<p>Creates an array whose contents is a range of numbers between min and max.</p>

<Example @name="demo-helpers-arrays-range.hbs">
	{{#each (range 10 15) as |step|}}
		{{step}}
	{{/each}}
</Example>

<h2>reject-by</h2>

<p>Returns the given array omitting those matching the property.</p>

<Example @name="demo-helpers-arrays-rejectby.hbs">
	{{#each (reject-by "isAdult" this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>Returns the given array omitting those matching the property.</p>

<Example @name="demo-helpers-arrays-rejectby-value.hbs">
	{{#each (reject-by "isAdult" false this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>You can also pass an action as second argument.</p>

<Example @name="demo-helpers-arrays-rejectby-function.hbs">
	{{#each (reject-by this.func this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>reverse</h2>

<p>Rearranges the array in reverse order.</p>

<Example @name="demo-helpers-arrays-reverse.hbs">
	{{#each (reverse this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>slice</h2>

<p>Returns a slice of the given array.</p>

<Example @name="demo-helpers-arrays-slice.hbs">
	{{#each (slice 2 4 this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>search-by</h2>

<Example @name="demo-helpers-arrays-searchby.hbs">
	<Input @type="text" @value={{this.search}} />
</Example>

<p>Returns the given array where the given property contain the given value.</p>

<Example @name="demo-helpers-arrays-searchby-one.hbs">
	{{#each (search-by "name" this.search this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>You can also specify multiple properties to search.</p>

<Example @name="demo-helpers-arrays-searchby-multi.hbs">
	{{#each (search-by "name" "age" this.search this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>You can also use an array containing the properties to search.</p>

<Example @name="demo-helpers-arrays-searchby-array-display.hbs">
	{{#each (search-by (array "name" "age") this.search this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>sort-by</h2>

<p>Returns the given array sorted by the defined properties.</p>

<Example @name="demo-helpers-arrays-sortby.hbs">
	{{#each (sort-by "age" this.people) as |person|}}
		{{person.age}}
	{{/each}}
</Example>

<p>You can also pass an action as second argument.</p>

<Example @name="demo-helpers-arrays-sortby-action.hbs">
	{{#each (sort-by this.func this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>Returns the given array sorted using a specific locale comparator.</p>

<Example @name="demo-helpers-arrays-sortby-locale.hbs">
	{{#each (sort-by "name" this.people locale=true) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>You can also pass <code>asc</code> or <code>desc</code> suffixes to specify sort ordering.</p>

<Example @name="demo-helpers-arrays-sortby-locale-desc.hbs">
	{{#each (sort-by "name:desc" this.people locale=true) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>Or you can specify that numeric collation should be used when sorting.</p>

<Example @name="demo-helpers-arrays-sortby-locale-numeric.hbs">
	{{#each (sort-by "age" this.people locale=true numeric=true) as |person|}}
		{{person.age}}
	{{/each}}
</Example>

<p>Or you can specify that punctuation should be ignored when sorting.</p>

<Example @name="demo-helpers-arrays-sortby-locale-punctuation.hbs">
	{{#each (sort-by "name" this.people locale=true ignorePunctuation=false) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>Or you can specify which case should sort first. Possible values are <code>lower</code>, <code>upper</code>, or <code>false</code> (default).</p>

<Example @name="demo-helpers-arrays-sortby-locale-castfirst.hbs">
	{{#each (sort-by "name" this.people locale=true caseFirst="upper") as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>Or you can specify the sensitivity of the locale sort algorithm. Possible values are <code>case</code>, <code>accent</code>, <code>variant</code>, or <code>base</code> (default).</p>

<Example @name="demo-helpers-arrays-sortby-locale-sensitivity.hbs">
	{{#each (sort-by "name" this.people locale=true sensitivity="case") as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>split</h2>

<p>Splits a string/strings on a character and returns an array.</p>

<Example @name="demo-helpers-arrays-split.hbs">
	{{#each (split "/" "app/styles/sub/main.js") as |part|}}
		{{part}}
	{{/each}}
</Example>

<h2>take</h2>

<p>Returns the given array with the first <code>count</code> items only.</p>

<Example @name="demo-helpers-arrays-take.hbs">
	{{#each (take 3 this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>union</h2>

<p>Returns an array of unique items from all of the given arrays.</p>

<Example @name="demo-helpers-arrays-union.hbs">
	{{#each (union this.people this.childs this.adults) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>uniq-by</h2>

<p>Returns an array of unique items, compared using the given property, from the given array.</p>

<Example @name="demo-helpers-arrays-uniqby.hbs">
	{{#each (uniq-by "name" this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<h2>w</h2>

<p>Splits a string/strings on whitespace or turns multiple words into an array.</p>

<Example @name="demo-helpers-arrays-w.hbs">
	{{#each (w "First Second" "Third") as |step|}}
		{{step}}
	{{/each}}
</Example>

<h2>without</h2>

<p>Returns the given array without the given object.</p>

<Example @name="demo-helpers-arrays-without.hbs">
	{{#each (without this.adult1 this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>

<p>Returns the given array without the given array of objects.</p>

<Example @name="demo-helpers-arrays-without-multi.hbs">
	{{#each (without this.adults this.people) as |person|}}
		{{person.name}}
	{{/each}}
</Example>